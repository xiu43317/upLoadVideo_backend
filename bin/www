#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const HLSServer = require('hls-server')
const { Server } = require("socket.io");
const Danmu = require("../models/Danmu")


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
  },
});
// 把 io 傳給 app 使用
app.set('io', io);

const addDanmu = async(videoId, danmuData) => {
  return await Danmu.findOneAndUpdate(
    { videoId }, // 找到該影片
    { $push: { danmus: danmuData } }, // 把新彈幕推進去
    { new: true, upsert: true } // 回傳更新後的 document；如果沒影片就建立新的
  );
}

io.on('connection', (socket) => {
  console.log('a user connected', socket.id);
  socket.on('newDanmu', (data) => {
    addDanmu(data.id,{text:data.text,time:data.time})
      .then((result)=>console.log(result))
      .catch((err)=>console.log(err))
    console.log('收到彈幕:', data);
    io.emit('danmuBroadcast', data);
  });

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});

// const hls = new HLSServer(server, {
//   path: '/streams',
//   dir: 'hls_output',
//   onBeforeRequest: (req, res) => {
//     const origin = req.headers.origin;

//     // ✅ 檢查來源並允許
//     if (origin === 'http://localhost:5173') {
//       res.setHeader('Access-Control-Allow-Origin', origin);
//     }

//     res.setHeader('Access-Control-Allow-Credentials', 'true');
//     res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');

//     // ✅ 如果是預檢請求（OPTIONS），直接結束回應
//     if (req.method === 'OPTIONS') {
//       res.writeHead(204);
//       res.end();
//       return;
//     }
//     if (!req.url.startsWith('/streams/')) {
//       return false; // ❗不要處理非 HLS 路徑，交給 Express
//     }
//   }
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
